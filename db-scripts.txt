CREATE USER 'geek'@'localhost' IDENTIFIED BY 'geek';
GRANT ALL PRIVILEGES ON * . * TO 'geek'@'localhost';
---
CREATE DATABASE IF NOT EXISTS geek_db;
---
DROP TABLE IF EXISTS students;
CREATE TABLE students (
	id int(11) NOT NULL AUTO_INCREMENT,
    name VARCHAR(100) DEFAULT NULL,
    PRIMARY KEY(id)
) ENGINE=InnoDB CHARSET=latin1;
---
DROP TABLE IF EXISTS courses;
CREATE TABLE courses (
	id int(11) NOT NULL AUTO_INCREMENT,
    title VARCHAR(100) DEFAULT NULL,
    PRIMARY KEY(id)
) ENGINE=InnoDB CHARSET=latin1;
---
DROP TABLE IF EXISTS students_courses;
CREATE TABLE students_courses (
	student_id int(11) NOT NULL,
    course_id int(11) NOT NULL,

    PRIMARY KEY (student_id, course_id),

    CONSTRAINT FK_STUDENT FOREIGN KEY (student_id)
    REFERENCES students (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION,

    CONSTRAINT FK_COURSE FOREIGN KEY (course_id)
    REFERENCES courses (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB CHARSET=latin1;

INSERT INTO `geek_db`.`students` (`name`) VALUES ('Ivanov');
INSERT INTO `geek_db`.`students` (`name`) VALUES ('Petrov');
INSERT INTO `geek_db`.`students` (`name`) VALUES ('Sidorov');

INSERT INTO `geek_db`.`courses` (`title`) VALUES ('Algebra');
INSERT INTO `geek_db`.`courses` (`title`) VALUES ('Literatura');
INSERT INTO `geek_db`.`courses` (`title`) VALUES ('Phisika');















---
DROP TABLE IF EXISTS authors;
CREATE TABLE authors (
	id int(11) NOT NULL AUTO_INCREMENT,
    name VARCHAR(80) DEFAULT NULL,
    PRIMARY KEY(id)
) ENGINE=InnoDB CHARSET=latin1;
---
DROP TABLE IF EXISTS books;
CREATE TABLE books (
	id int(11) NOT NULL AUTO_INCREMENT,
    title VARCHAR(100) DEFAULT NULL,
    author_id int(11) DEFAULT NULL,
    PRIMARY KEY(id),
    CONSTRAINT FK_AUTH_ID FOREIGN KEY (author_id)
    REFERENCES authors (id)
) ENGINE=InnoDB CHARSET=latin1;
---
DROP TABLE IF EXISTS readers;
CREATE TABLE readers (
	id int(11) NOT NULL AUTO_INCREMENT,
    name VARCHAR(80) DEFAULT NULL,
    PRIMARY KEY(id)
) ENGINE=InnoDB CHARSET=latin1;
---
CREATE TABLE books_readers (
	book_id int(11) NOT NULL,
    reader_id int(11) NOT NULL,

    PRIMARY KEY (book_id, reader_id),

    CONSTRAINT FK_BOOK FOREIGN KEY (book_id)
    REFERENCES books (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION,

    CONSTRAINT FK_READER FOREIGN KEY (reader_id)
    REFERENCES readers (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB CHARSET=latin1;










@Controller
@RequestMapping("/students")
public class StudentController {

    private StudentService studentService;

    @Autowired
    public void setStudentService(StudentService studentService) {
        this.studentService = studentService;
    }

//    @GetMapping("")
//    public String studentsPage(Model model) {
//        Student allStudents = studentService.getStudent();
//        model.addAttribute("students", allStudents);
//        return "studentInfo";
//    }

//    @GetMapping("")
//    public String studentsPage(Model model) {
//        List<Student> allStudents = studentService.getAllStudents();
//        model.addAttribute("students", allStudents);
//        return "studentInfo";
//    }

//    @GetMapping("")
//    public String studentsPage(Model model) {
//        List<Student> allStudents = studentService.getAllStudentsBetweenScore();
//        model.addAttribute("students", allStudents);
//        return "studentInfo";
//    }

    @GetMapping("")
    public String studentsPage(Model model) {
        Page<Student> allStudentsOnTwoPage = studentService.getAllStudentsOnTwoPage();
        model.addAttribute("students", allStudentsOnTwoPage);
        return "studentInfo";
    }
}











import javax.persistence.*;

@Entity
@Table(name = "students")
//@Data
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    public int id;

    @Column(name = "firstname")
    public String firstName;

    @Column(name = "score")
    public int score;
}









@Repository
public interface StudentRepository extends PagingAndSortingRepository<Student,Integer> {
//public interface StudentRepository extends CrudRepository<Student, Integer> {

    List<Student> findAllByScoreBetween(int min, int max);

    Student findOneByFirstName(String firstName);

    Iterable<Student> findAll(Sort sort);
}








@Service
public class StudentService {
    private StudentRepository studentRepository;

    @Autowired
    public void setStudentRepository(StudentRepository studentRepository) {
        this.studentRepository = studentRepository;
    }

    //получаем студента с именем Mike
//    public Student getStudent() {
//        Student student = studentRepository.findOneByFirstName("Mike");
//        return student;
//    }

    //получаем отсортированный список студентов
//    public List<Student> getAllStudents() {
//        Sort sort = new Sort(new Sort.Order(Sort.Direction.DESC, "Score"));
//        List<Student> students = (List<Student>) studentRepository.findAll(sort);
//        return students;
//    }

    //получаем студентом с общим баллом между заданными значениями
//    public List<Student> getAllStudentsBetweenScore() {
//        List<Student> students = (List<Student>) studentRepository.findAllByScoreBetween(40,45);
//        return students;
//    }

    //постраничное отображение
    public Page<Student> getAllStudentsOnTwoPage() {
        Page<Student> students = studentRepository.findAll(PageRequest.of(0, 10));
        return students;
    }

    public StudentService (){

    }
}





















